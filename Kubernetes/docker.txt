安装依赖包：
yum install -y libseccomp
安装docker:
yum install -y docker-io
启动docker:
systemctl start docker
设置开机启动：
systemctl enable docker
查找镜像：
docker search centos
下载镜像：
docker pull centos
查看已下载的镜像：
docker images
删除镜像：
docker rmi
运行容器：
docker run centos /bin/echo 'Hello World'
查看运行和运行过的容器：
docker ps -a
进入容器：
docker run --name mydocker -it centos /bin/bash
在后台运行容器：
docker run -d --name mynginx nginx
通过CONTAINER ID启动容器：
docker start 59c0504f38f5
停止容器：
docker stop 59c0504f38f5
强行停止容器：
docker -f stop 59c0504f38f5
删除容器：
docker rm 59c0504f38f5
获取容器pid:
docker inspect --format "{{.State.Pid}}" mynginx
进入容器：
nsenter --target 19271 --mount --uts --ipc --net --pid
退出容器：exit
清理容器：docker ps -a | sed '1d' | awk '{print $1}' | xargs docker rm -f

进入docker脚本：
#!/bin/bash
CNAME=$1
CPID=$(docker inspect --format "{{.State.Pid}}" $CNAME)
nsenter --target "$CPID" --mount --uts --ipc --net --pid

docker网络管理
查看网桥：brctl show
查看路由表：ip ro li
随机端口映射：docker run -d -P --name mynginx1 nginx
指定端口映射(多个-p同时映射多个端口)：docker run -d -p 88:80 -p 89:443 --name mynginx2 nginx
查看容器运行状态：docker ps -l

docker数据管理(nginx镜像无法支持-it参数)
创建数据卷：docker run -d --name webapp1 -h webapp1 -v /mnt/cdrom:/data nginx
只读方式挂载：docker run -d --name webapp1 -h webapp1 -v /mnt/cdrom:/data:ro nginx
从其它容器引用数据卷：docker run -it --name webapp2 --volumes-from webapp1 centos
查看挂载的卷：
docker inspect -f '{{.Config.Volumes}}' c59dd27cdbce
docker inspect -f '{{.HostConfig.Binds}}' c59dd27cdbce

手动构建镜像
1、运行centos容器
docker run --name mynginx -it -v /software:/software centos
2、安装nginx,在容器中安装nginx依赖包
yum install -y wget gcc gcc-c++ make openssl-devel pcre-devel zlib-devel
3、编辑nginx.conf
daemon off;
3、创建镜像：docker commit -m "mynginx v3" ce403b239449 huhaiqing:v3
4、创建容器：docker run -d --name web01 -p 90:80 -v /software:/software huhaiqing:v3 /usr/local/nginx/sbin/nginx

dockerfile构建镜像
1、创建目录
mkdir -pv /opt/docker-file/nginx
2、上传nginx-1.10.1.tar.gz到/opt/docker-file/nginx
3、创建dockerfile文件
cd /opt/docker-file/nginx
vim Dockerfile
	# This is my first dockerfiel
	# Versions 1.0
	# Atuhor:Huhaiqing

	# Base images
	FROM centos

	# MAINTAINER
	MAINTAINER Haiqing Hu

	# ADD
	ADD nginx-1.10.1.tar.gz /usr/local/src

	# RUN
	RUN yum install -y wget gcc gcc-c++ make openssl-devel pcre-devel zlib-devel tar
	RUN groupadd -f www
	RUN useradd -d /var/cache/nginx -s /sbin/nologin -g www nginx
	RUN mkdir /var/log/nginx 
	RUN mkdir /usr/local/nginx 
	RUN chown -R nginx.www /var/log/nginx
	RUN chown -R nginx.www /usr/local/nginx

	# WORKDIR
	WORKDIR /usr/local/src/nginx-1.10.1
	RUN ./configure --prefix=/usr/local/nginx \
	--user=nginx \
	--group=www \
	--pid-path=/run/nginx.pid \
	--error-log-path=/var/log/nginx/error.log \
	--http-log-path=/var/log/nginx/access.log
	RUN make && make install
	RUN echo "daemon off;">>/usr/local/nginx/conf/nginx.conf

	ENV PATH /usr/local/nginx/sbin:$PATH
	EXPOSE 80

	CMD ["nginx"]
4、创建镜像
cd /opt/docker-file/nginx
docker build -t nginx-file:v1 .
5、创建运行容器
docker run -d --name web01 -p 100:80 nginx-file:v1

资源管理
1、创建压力镜像
mkdir -pv /opt/docker-file/stress
cd /opt/docker-file/stress
wget http://mirrors.aliyun.com/repo/epel-6.repo
vim Dockerfile
	FROM centos
	ADD epel-6.repo /etc/yum.repos.d/
	RUN yum install -y stress
	RUN yum clean all
	ENTRYPOINT ["stress"]
docker build -t stress:v1 .
2、运行镜像测试CUP(stress:v1后面为压力测试命令)
docker run -it --rm stress:v1 --cup 1
docker run -d --cpuset-cpus=0-1 stress:v1 --cpu 1
3、运行镜像测试内存(大于分配内存时容器退出)
docker run -d --name stress256 -m 128m stress:v1 --vm 1 --vm-bytes 256m --vm-hang 0
docker run -d --name stress128 -m 128m stress:v1 --vm 1 --vm-bytes 128m --vm-hang 0
4、用top命令查看CPU使用率
PID  USER      PR   NI   VIRT     RES    SHR S  %CPU   %MEM  TIME+   COMMAND 
3182 root      20   0    7252     92      0  R  100.0  0.0   1:36.79 stress

