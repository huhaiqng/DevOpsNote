1、限制连接频率
http {
    # 定义连接区域
	limit_conn_zone $binary_remote_addr zone=conn_zone:1m;
    server {
	    location / {
		    # 限制同一 IP 每秒连接一次
			limit_conn conn_zone 1;
		}
	}
}

2、限制请求频率
http {
    # 定义请求区域，同一个 IP 的请求频率为100次每秒
	limit_req_zone $binary_remote_addr zone=req_zone:2m rate=100r/s;
    server {
	    location / {
		    # 限制同一 IP 每秒请求一次，拒绝所有超过一次的请求
			limit_req zone=req_zone;
			# limit_req zone=req_zone burst=200;
			# burst=200 表示最大并发数为200，超过200的返回503。
		}
	}
}
# 处理流程：同一客户端 IP 发起请求，如果并发数少于 burst ，则按 rate 的频率进行处理；
            如果并发数大于 burst ，则将大于 burst 的请求返回 503，等于 burst 的请求 按 rate 的频率进行处理。
			必须设置 rate 为 burst 的整数倍或 burst 为 rate 的整数倍，否则可能会有503返回。
			建议 burst 可以设置大一些，rate 根据服务器性能设置。

3、访问控制
location ~ ^/hello/ {
    root /var/www/html;
	deny 192.168.1.60;
	allow all;
}
# ~ 开启模式匹配，^/hello/ 匹配以 /hello/ 的 uri

4、多层 nginx 反向代理，$remote_addr 获取客户端真实 IP
http {
    set_real_ip_from  172.16.1.52;
    real_ip_header    X-Real-IP;
}